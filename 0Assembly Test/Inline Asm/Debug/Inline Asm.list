
Inline Asm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000114  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000244  0800024c  0001024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000244  08000244  0001024c  2**0
                  CONTENTS
  4 .ARM          00000000  08000244  08000244  0001024c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000244  0800024c  0001024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000244  08000244  00010244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000248  08000248  00010248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800024c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800024c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000010c  00000000  00000000  00010275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000ad  00000000  00000000  00010381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00010430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00010490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f22  00000000  00000000  000104d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000045c  00000000  00000000  000113fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003ac7  00000000  00000000  00011856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001531d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b8  00000000  00000000  00015370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800022c 	.word	0x0800022c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800022c 	.word	0x0800022c

08000170 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
//	__asm volatile ("MOV R0,%0" : :"r"(x));
//
//    /****************** Labs Lec 9 ******************/

	/* Lab 1 */
	int ControlReg = 5;
 8000176:	2305      	movs	r3, #5
 8000178:	607b      	str	r3, [r7, #4]
	__asm volatile ("MRS %0, PRIMASK " : "=r"(ControlReg) : ); /* Save the primask register */
 800017a:	f3ef 8310 	mrs	r3, PRIMASK
 800017e:	607b      	str	r3, [r7, #4]

	__asm("CPSID i"); /* Disable Global Interrupt */
 8000180:	b672      	cpsid	i

	__asm volatile ("MSR PRIMASK,%0" : :"r"(ControlReg));
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f383 8810 	msr	PRIMASK, r3
//	/* Lab 4 */
//	int p, *p2 = (int * )0x20000008;
//	__asm volatile("LDR %0,[%1]" :"=r"(p):"r"(p2));

    /* Loop forever */
	for(;;);
 8000188:	e7fe      	b.n	8000188 <main+0x18>

0800018a <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 800018a:	b480      	push	{r7}
 800018c:	af00      	add	r7, sp, #0
	while(1)
 800018e:	e7fe      	b.n	800018e <HardFault_Handler+0x4>

08000190 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000190:	480d      	ldr	r0, [pc, #52]	; (80001c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000192:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000194:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000198:	480c      	ldr	r0, [pc, #48]	; (80001cc <LoopForever+0x6>)
  ldr r1, =_edata
 800019a:	490d      	ldr	r1, [pc, #52]	; (80001d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800019c:	4a0d      	ldr	r2, [pc, #52]	; (80001d4 <LoopForever+0xe>)
  movs r3, #0
 800019e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001a0:	e002      	b.n	80001a8 <LoopCopyDataInit>

080001a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001a6:	3304      	adds	r3, #4

080001a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001ac:	d3f9      	bcc.n	80001a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ae:	4a0a      	ldr	r2, [pc, #40]	; (80001d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001b0:	4c0a      	ldr	r4, [pc, #40]	; (80001dc <LoopForever+0x16>)
  movs r3, #0
 80001b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001b4:	e001      	b.n	80001ba <LoopFillZerobss>

080001b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001b8:	3204      	adds	r2, #4

080001ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001bc:	d3fb      	bcc.n	80001b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001be:	f000 f811 	bl	80001e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001c2:	f7ff ffd5 	bl	8000170 <main>

080001c6 <LoopForever>:

LoopForever:
  b LoopForever
 80001c6:	e7fe      	b.n	80001c6 <LoopForever>
  ldr   r0, =_estack
 80001c8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80001cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001d4:	0800024c 	.word	0x0800024c
  ldr r2, =_sbss
 80001d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001dc:	2000001c 	.word	0x2000001c

080001e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001e0:	e7fe      	b.n	80001e0 <ADC1_2_IRQHandler>
	...

080001e4 <__libc_init_array>:
 80001e4:	b570      	push	{r4, r5, r6, lr}
 80001e6:	2600      	movs	r6, #0
 80001e8:	4d0c      	ldr	r5, [pc, #48]	; (800021c <__libc_init_array+0x38>)
 80001ea:	4c0d      	ldr	r4, [pc, #52]	; (8000220 <__libc_init_array+0x3c>)
 80001ec:	1b64      	subs	r4, r4, r5
 80001ee:	10a4      	asrs	r4, r4, #2
 80001f0:	42a6      	cmp	r6, r4
 80001f2:	d109      	bne.n	8000208 <__libc_init_array+0x24>
 80001f4:	f000 f81a 	bl	800022c <_init>
 80001f8:	2600      	movs	r6, #0
 80001fa:	4d0a      	ldr	r5, [pc, #40]	; (8000224 <__libc_init_array+0x40>)
 80001fc:	4c0a      	ldr	r4, [pc, #40]	; (8000228 <__libc_init_array+0x44>)
 80001fe:	1b64      	subs	r4, r4, r5
 8000200:	10a4      	asrs	r4, r4, #2
 8000202:	42a6      	cmp	r6, r4
 8000204:	d105      	bne.n	8000212 <__libc_init_array+0x2e>
 8000206:	bd70      	pop	{r4, r5, r6, pc}
 8000208:	f855 3b04 	ldr.w	r3, [r5], #4
 800020c:	4798      	blx	r3
 800020e:	3601      	adds	r6, #1
 8000210:	e7ee      	b.n	80001f0 <__libc_init_array+0xc>
 8000212:	f855 3b04 	ldr.w	r3, [r5], #4
 8000216:	4798      	blx	r3
 8000218:	3601      	adds	r6, #1
 800021a:	e7f2      	b.n	8000202 <__libc_init_array+0x1e>
 800021c:	08000244 	.word	0x08000244
 8000220:	08000244 	.word	0x08000244
 8000224:	08000244 	.word	0x08000244
 8000228:	08000248 	.word	0x08000248

0800022c <_init>:
 800022c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800022e:	bf00      	nop
 8000230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000232:	bc08      	pop	{r3}
 8000234:	469e      	mov	lr, r3
 8000236:	4770      	bx	lr

08000238 <_fini>:
 8000238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800023a:	bf00      	nop
 800023c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800023e:	bc08      	pop	{r3}
 8000240:	469e      	mov	lr, r3
 8000242:	4770      	bx	lr
